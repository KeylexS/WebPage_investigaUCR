@using Application.ResearchAreas
@using Domain.ResearchAreas.Entities
@using Domain.Core.Exceptions
@using Domain.Users.Entities
@using Presentation.Core.Components
@using Application.Users
@inject IUserService UserService

<MudText Typo="Typo.h2" style="text-align:center; ">Añadir Roles </MudText>
@if (_groupEditMessage is not null)
{
    <Alert Color="_groupEditAlertColor">
        @_groupEditMessage
    </Alert>
}
<MudDialog>
    <DialogContent>
        <Loading IsLoading="_isLoading">
            @foreach (var rol in _roles!)
            {
                @*bool Checked = false;
                if (_user.ResearchArea.Exists(a => a.Id == area.Id) || selectedRoles.Exists(a => a.Id == area.Id))
                {
                    Checked = true;

                }
                if (Checked == true)
                {
                    <div><MudCheckBox T="bool" Checked="@Checked" CheckedChanged="@((e)=>CheckboxClicked(area,e))" Label="@area.Name" /></div>
                }
                else
                {*@
                <div><MudCheckBox T="bool" CheckedChanged="@((e)=>CheckboxClicked(rol,e))" Label="@rol" /></div>
                @*}*@
            }
        </Loading>
    </DialogContent>
    <DialogActions>
        <MudButton Style="block; margin-left: auto; margin-right: auto;" Color="Color.Primary" OnClick="Close">Cancelar</MudButton>
        <MudButton Style="block; margin-left: auto; margin-right: auto;" OnClick="(AddSelectedRol)" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Añadir</MudButton>
    </DialogActions>


</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public User _user { get; set; } = null!;
    void Close() => MudDialog.Close(DialogResult.Ok(true));

    private bool _isLoading { get; set; }

    public IEnumerable<string>? _roles { get; set; } = null!;

    public List<string> selectedRoles { get; set; } = new List<string>();
    public IReadOnlyCollection<string> SelectedRoles => selectedRoles.AsReadOnly();

    public bool ReadOnly { get; set; } = false;
    private string? _groupEditMessage = null;
    private Alert.AlertColor _groupEditAlertColor = Alert.AlertColor.Danger;
    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
    }

    private async Task LoadRoles()
    {
        _isLoading = true;
        _roles = await UserService.GetAllRoles();
        _isLoading = false;
    }

    public void CheckboxClicked(string selectedArea, object aChecked)
    {
        if ((bool)aChecked)
        {
            //if (!selectedRoles.Exists(a => a.Name == selectedArea.Name))
            //{
                selectedRoles.Add(selectedArea);
            //}
        }
        else
        {
            //if (selectedRoles.Exists(a => a.Name == selectedArea.Name))
            //{
            selectedRoles.Remove(selectedArea);
            //}
        }
        StateHasChanged();
    }

    public async Task AddSelectedRol()
    {
        _groupEditMessage = null;
        ReadOnly = true;
        StateHasChanged();
        try
        {
            await UserService.AssignRoltoUser(selectedRoles.ToList(),_user );
            _groupEditMessage = "Rol asignado a usuario con exito.";
            _groupEditAlertColor = Alert.AlertColor.Success;
            StateHasChanged();
            await Task.Delay(3000);
            _groupEditMessage = null;
            StateHasChanged();
        }
        catch (DomainException e)
        {
            _groupEditMessage = e.Message;
            StateHasChanged();
            await Task.Delay(3000);
            _groupEditMessage = null;
            StateHasChanged();
        }
    }

}
