@page "/proyectos/{Id}"
@using Application.ResearchProjects
@using Application.People
@using Domain.ResearchProjects.Entities
@using Domain.People.Entities
@using Domain.Publications.Entities
@using Domain.Theses.Entities
@using Domain.Core.Exceptions
@using Presentation.Core.Components
@using Presentation.People.Components
@using Presentation.Publications.Components
@using Presentation.ResearchProjects.Components
@using Presentation.Theses.Components
@inject NavigationManager _navigationManager
@using System.Collections.Generic;
@using System.Linq;
@inject IChartService ChartsService
@using Domain.Shared.Charts.Entities
@using Presentation.Charts.Core
@using Application.Shared
@inject IResearchProjectsService ResearchProjectService
@*@inject IPeopleService PersonService*@
@inject IDialogService DialogService

<Loading IsLoading="_isLoading">
    <div class="form-group">
        <ResearchProjectInfo researchProject="_researchProject" OnNameEdit="ChangeName" OnDatesEdit="ChangeDates" OnDescriptionEdit="ChangeDescription" OnImageEdit="ChangeImage" OnStatusEdit="ChangeStatus" @ref="projectInfo"> </ResearchProjectInfo>

        @*PEOPLE*@
        <br>
        <MudPaper Class="d-flex flex-grow-1 gap-4 justify-center" Elevation="0">
            <MudText id="projects" Typo="Typo.h1" Align="Align.Center">
                Personas
            </MudText>
            <AuthorizeView Roles="AdminRole">
                <ToolButton onClick="AddCollab" _icon="@Icons.Material.Filled.AddCircle" _text="Agregar colaboración"></ToolButton>
                <ToolButton onClick="DeleteCollab" _icon="@Icons.Material.Filled.RemoveCircle" _text="Eliminar colaboración"></ToolButton>
                <ToolButton onClick="EditCollab" _icon="@Icons.Material.Filled.Edit" _text="Editar colaboración"></ToolButton>
            </AuthorizeView>
        </MudPaper>
        <br>
 
        <MudPaper Class="d-flex flex-grow-1 gap-4 justify-center" Elevation="0">
            @if (isOpenPeople)
            {
                
                <PeopleListWithMainResearcher _people="_associatedPeople" />
            }
            else if (_associatedPeople.Count() > 0)
            {
                <PeopleListWithMainResearcher _people="_associatedPeople.Take(4)" />
            }
            else
            {
                <MudText Align="Align.Center" Color=Color.Warning Typo="Typo.body2" Class="text-danger">No se encontraron grupos asociados.</MudText>
            }
        </MudPaper>

        @if (_collaboratorEditMessage is not null)
        {
        <Alert Color="_collaboratorEditColor">
            @_collaboratorEditMessage
        </Alert>
        }

        @if (_associatedPeople.Count() > 4)
        {
            <br>
            <br>
            <MudPaper Class="d-flex flex-grow-1 gap-4 justify-center" Elevation="0">
                <SeeMoreButton onClick="onClickPeople" />
            </MudPaper>
        }

        @*PUBLICATIONS*@
        <br>
        <MudPaper Class="d-flex flex-grow-1 gap-4 justify-center" Elevation="0">
            <MudText id="projects" Typo="Typo.h1" Align="Align.Center">
                Publicaciones
            </MudText>
            <AuthorizeView Roles="AdminRole">
                <ToolButton onClick="AddPublication" _icon="@Icons.Material.Filled.AddCircle" _text="Agregar publicación"></ToolButton>
                <ToolButton onClick="DeletePublication" _icon="@Icons.Material.Filled.RemoveCircle" _text="Eliminar publicación"></ToolButton>

            </AuthorizeView>
         </MudPaper>
        <br>
        <MudPaper Class="d-flex flex-grow-1 gap-4 justify-center" Elevation="0">
            @if (isOpen)
            {
                <PublicationsList _publications="_researchProject!.Publications" />
            }
            else if (_researchProject!.Publications.Count > 0)
            {
                <PublicationsList _publications="_researchProject.Publications.Take(1)" />
            }
            else
            {
                <MudText Align="Align.Center" Color=Color.Warning Typo="Typo.body2" Class="text-danger">No se encontraron publicaciones asociadas.</MudText>
            }
        </MudPaper>
        @if (_publicationEditMessage is not null)
        {
            <Alert Color="_publicationEditColor">
                @_publicationEditMessage
            </Alert>
        }
        @if (_researchProject!.Publications.Count > 1)
        {
            <br>
            <br>
            <MudPaper Class="d-flex flex-grow-1 gap-4 justify-center" Elevation="0">
                <SeeMoreButton onClick="onClickProjects" />
            </MudPaper>
        }
        @*PUBLICATIONS*@
        <MudText Elevation="0" Style="padding-top:20px; padding-bottom:20px" Align=" Align.Center" Typo="Typo.h3">
            Publicaciones por colaborador
        </MudText>
            <Radar_Chart radarChart="_radarChart" />
        @*THESES*@
        <MudPaper Class="d-flex flex-grow-1 gap-4 justify-center" Elevation="0">
            <MudText id="projects" Typo="Typo.h1" Align="Align.Center">
                Tesis
            </MudText>
            <AuthorizeView Roles="AdminRole, CoordinatorRole">
                <MudIconButton OnClick="openAddThesisDialog" Icon="@Icons.Material.Filled.AddCircle" aria-label="agregar una tesis"></MudIconButton>
                <MudIconButton OnClick="openDeleteThesisDialog" Icon="@Icons.Material.Filled.RemoveCircle" aria-label="eliminar una tesis"></MudIconButton>
            </AuthorizeView>
        </MudPaper>
        <MudPaper Class="d-flex flex-grow-1 gap-4 justify-center" Elevation="0">
            @if (isOpen)
            {
                <ThesesList _theses="_researchProject.Theses" />
            }
            else if (_researchProject.Theses.Count > 0)
            {
                <ThesesList _theses="_researchProject.Theses.Take(1)" />
            }
            else
            {
                <MudText Align="Align.Center" Color=Color.Warning Typo="Typo.body2" Class="text-danger">No se encontraron tesis asociadas.</MudText>
            }
        </MudPaper>
        @if (_researchProject.Theses.Count > 1)
        {
            <br>
            <br>
            <MudPaper Class="d-flex flex-grow-1 gap-4 justify-center" Elevation="0">
                <SeeMoreButton onClick="onClickProjects" />
            </MudPaper>
        }
    </div>
</Loading>

@code {
    [Parameter]
    public string Id { get; set; } = "";
    private bool _isLoading { get; set; }
    private ResearchProject? _researchProject;
    private IEnumerable<Person> _people = Enumerable.Empty<Person>();
    private IEnumerable<Person> _associatedPeople = Enumerable.Empty<Person>();
    private IEnumerable<Publication> _publications = Enumerable.Empty<Publication>();
    public IEnumerable<Collaborate>? _Collaborates { get; set; } = Enumerable.Empty<Collaborate>();
    private bool isOpen = false;
    private bool isOpenPeople = false;
    public RadarChart? _radarChart { get; set; } = null!;
    private string? _collaboratorEditMessage = null;
    private Alert.AlertColor _collaboratorEditColor = Alert.AlertColor.Danger;
    private string? _publicationEditMessage = null;
    private Alert.AlertColor _publicationEditColor = Alert.AlertColor.Danger;
    ResearchProjectInfo projectInfo = new ResearchProjectInfo();


    public void onClickProjects(bool isOpen)
    {
        this.isOpen = isOpen;

    }

    public void onClickPeople(bool isOpenPeople)
    {
        this.isOpenPeople = isOpenPeople;

    }

    protected override async Task OnInitializedAsync()
    {
        await LoadResearchProject();
    }

    public void FetchCollaborators()
    {

        foreach (var collaborate in _Collaborates!)
        {
            _associatedPeople = _associatedPeople.Append(_people.Where(p => p.Id == collaborate.PeopleId).ToList());       
        }
    }
    private async Task LoadResearchProject()
    {
        _isLoading = true;
        _researchProject = null!;
        _researchProject = await ResearchProjectService.GetResearchProjectByIdAsync(Id);
        _Collaborates = Enumerable.Empty<Collaborate>();
        _Collaborates = _researchProject!.Collaborates.OrderByDescending(collaborate => collaborate.Orden);
        _Collaborates = _Collaborates.Reverse();
        _people = await ResearchProjectService.GetAllPeopleAsyncfromRP();
        _associatedPeople = Enumerable.Empty<Person>();
        _associatedPeople = _associatedPeople.Append(_researchProject!.MainResearcher!);
        _publications = _researchProject!.Publications;
        FetchCollaborators();
        _radarChart = ChartsService.GetRadarChart(_associatedPeople);
        //TODO Handle null value
        _isLoading = false;
    }
    async Task AddCollab()
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add("_associatedCollaborates", _Collaborates);
        dialogParameters.Add("_associatedResearchProject", _researchProject);
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true};
        var dialog = DialogService.Show<CollaboratorForm>("", dialogParameters, maxWidth);
        DialogResult result = null!;
        try
        {
            result = await dialog.Result;
            if (result.Cancelled)
            {
                await LoadResearchProject();
                _collaboratorEditMessage = "Se ha agregado un nuevo colaborador exitosamente.";
                _collaboratorEditColor = Alert.AlertColor.Success;
                StateHasChanged();
                await Task.Delay(5000);
                _collaboratorEditMessage = null;
                _collaboratorEditColor = Alert.AlertColor.Danger;
                StateHasChanged();
            }
        }
        catch (DomainException e)
        {
            _collaboratorEditMessage = e.Message;
            StateHasChanged();
            await Task.Delay(5000);
            _collaboratorEditMessage = null;
            StateHasChanged();
        }
        catch (Exception)
        {
            _collaboratorEditMessage = "Ocurrió un error. Intente de nuevo.";
            StateHasChanged();
            await Task.Delay(5000);
            _collaboratorEditMessage = null;
            StateHasChanged();
        }

    }
    async Task DeleteCollab()
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add("_associatedCollaborates", _Collaborates);
        dialogParameters.Add("_associatedResearchProject", _researchProject);
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<CollaboratorDeleteForm>("", dialogParameters, maxWidth);
        DialogResult result = null!;
        try
        {
            result = await dialog.Result;
            if (result.Cancelled)
            {
                await LoadResearchProject(); 
                _collaboratorEditMessage = "Se ha eliminado el colaborador exitosamente.";
                _collaboratorEditColor = Alert.AlertColor.Success;
                StateHasChanged();
                await Task.Delay(5000);
                _collaboratorEditMessage = null;
                _collaboratorEditColor = Alert.AlertColor.Danger;
                StateHasChanged();
            }
        }
        catch (DomainException e)
        {
            _collaboratorEditMessage = e.Message;
            StateHasChanged();
            await Task.Delay(5000);
            _collaboratorEditMessage = null;
            StateHasChanged();
        }
        catch (Exception)
        {
            _collaboratorEditMessage = "Ocurrió un error. Intente de nuevo.";
            StateHasChanged();
            await Task.Delay(5000);
            _collaboratorEditMessage = null;
            StateHasChanged();
        }
    }
    async Task EditCollab()
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add("_associatedCollaborates", _Collaborates);
        dialogParameters.Add("_associatedResearchProject", _researchProject);
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<CollaboratorEditForm>("", dialogParameters, maxWidth);
        DialogResult result = null!;
        try
        {
            result = await dialog.Result;
            if (result.Cancelled)
            {
                await LoadResearchProject();
                _collaboratorEditMessage = "Se ha editado la colaboracion exitosamente.";
                _collaboratorEditColor = Alert.AlertColor.Success;
                StateHasChanged();
                await Task.Delay(5000);
                _collaboratorEditMessage = null;
                _collaboratorEditColor = Alert.AlertColor.Danger;
                StateHasChanged();
            }
        }
        catch (DomainException e)
        {
            _collaboratorEditMessage = e.Message;
            StateHasChanged();
            await Task.Delay(5000);
            _collaboratorEditMessage = null;
            StateHasChanged();
        }
        catch (Exception)
        {
            _collaboratorEditMessage = "Ocurrió un error. Intente de nuevo.";
            StateHasChanged();
            await Task.Delay(5000);
            _collaboratorEditMessage = null;
            StateHasChanged();
        }
    }
    async Task AddPublication()
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add("_associatedPublications", _publications);
        dialogParameters.Add("_associatedResearchProject", _researchProject);
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<PublicationAddForm>("", dialogParameters, maxWidth);
        DialogResult result = null!;
        try
        {
            result = await dialog.Result;
            if (result.Cancelled)
            {
                _publicationEditMessage = "Se ha agregado una nueva publicación exitosamente.";
                _publicationEditColor = Alert.AlertColor.Success;
                StateHasChanged();
                await Task.Delay(5000);
                _publicationEditMessage = null;
                _publicationEditColor = Alert.AlertColor.Danger;
                StateHasChanged();
            }
        }
        catch (DomainException e)
        {
            _publicationEditMessage = e.Message;
            StateHasChanged();
            await Task.Delay(5000);
            _publicationEditMessage = null;
            StateHasChanged();
        }
        catch (Exception)
        {
            _publicationEditMessage = "Ocurrió un error. Intente de nuevo.";
            StateHasChanged();
            await Task.Delay(5000);
            _publicationEditMessage = null;
            StateHasChanged();
        }
    }
    async Task DeletePublication()
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add("_associatedPublications", _publications);
        dialogParameters.Add("_associatedResearchProject", _researchProject);
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<PublicationDeleteForm>("", dialogParameters, maxWidth);
        DialogResult result = null!;
        try
        {
            result = await dialog.Result;
            if (result.Cancelled)
            {
                _publicationEditMessage = "Se ha eliminado la publicación exitosamente.";
                _publicationEditColor = Alert.AlertColor.Success;
                StateHasChanged();
                await Task.Delay(5000);
                _publicationEditMessage = null;
                _publicationEditColor = Alert.AlertColor.Danger;
                StateHasChanged();
            }
        }
        catch (DomainException e)
        {
            _publicationEditMessage = e.Message;
            StateHasChanged();
            await Task.Delay(5000);
            _publicationEditMessage = null;
            StateHasChanged();
        }
        catch (Exception)
        {
            _publicationEditMessage = "Ocurrió un error. Intente de nuevo.";
            StateHasChanged();
            await Task.Delay(5000);
            _publicationEditMessage = null;
            StateHasChanged();
        }
    }
    private void RefreshPage()
    {
        string refUrl = "/proyectos/" + _researchProject!.Id.ToString();
        _navigationManager.NavigateTo(refUrl, true);
    }

    private async void ChangeImage(byte[] _image)
    {
        try
        {
            await ResearchProjectService.SaveProjectImage(_researchProject!, _image);
            projectInfo._projectImageMessage = "La imagen del proyecto de investigación ha sido modificada.";
            projectInfo._projectAlertColor = Alert.AlertColor.Success;
            StateHasChanged();
            await Task.Delay(5000);
            projectInfo._projectImageMessage = null;
            projectInfo._projectAlertColor = Alert.AlertColor.Danger;
            StateHasChanged();
        }
        catch (DomainException e)
        {
            projectInfo._projectImageMessage = e.Message;
            StateHasChanged();
            await Task.Delay(5000);
            projectInfo._projectImageMessage = null;
            StateHasChanged();
        }
        catch (Exception)
        {
            projectInfo._projectImageMessage = "Ocurrió un error. Intente de nuevo.";
            StateHasChanged();
            await Task.Delay(5000);
            projectInfo._projectImageMessage = null;
            StateHasChanged();
        }
    }

     private async void ChangeName(string _text)
    {
        try
        {
            await ResearchProjectService.SaveProjectName(_researchProject!, _text);
            projectInfo._projectNameMessage = "El nombre del proyecto de investigación ha sido modificado.";
            projectInfo._projectAlertColor = Alert.AlertColor.Success;
            StateHasChanged();
            await Task.Delay(5000);
            projectInfo._projectNameMessage = null;
            projectInfo._projectAlertColor = Alert.AlertColor.Danger;
            StateHasChanged();
        }
        catch (DomainException e)
        {
            projectInfo._projectNameMessage = e.Message;
            StateHasChanged();
            await Task.Delay(5000);
            projectInfo._projectNameMessage = null;
            StateHasChanged();
        }
        catch (Exception)
        {
            projectInfo._projectNameMessage = "Ocurrió un error. Intente de nuevo.";
            StateHasChanged();
            await Task.Delay(5000);
            projectInfo._projectNameMessage = null;
            StateHasChanged();
        }
    }

    private async void ChangeDescription(string _text)
    {
        try
        {
            await ResearchProjectService.SaveProjectDescription(_researchProject!, _text);
            projectInfo._projectDescriptionMessage = "La descripción del proyecto de investigación ha sido modificada.";
            projectInfo._projectAlertColor = Alert.AlertColor.Success;
            StateHasChanged();
            await Task.Delay(5000);
            projectInfo._projectDescriptionMessage = null;
            projectInfo._projectAlertColor = Alert.AlertColor.Danger;
            StateHasChanged();
        }
        catch (DomainException e)
        {
            projectInfo._projectDescriptionMessage = e.Message;
            StateHasChanged();
            await Task.Delay(5000);
            projectInfo._projectDescriptionMessage = null;
            StateHasChanged();
        }
        catch (Exception)
        {
            projectInfo._projectDescriptionMessage = "Ocurrió un error. Intente de nuevo.";
            StateHasChanged();
            await Task.Delay(5000);
            projectInfo._projectDescriptionMessage = null;
            StateHasChanged();
        }
    }

    private async void ChangeDates(IEnumerable<DateTime> dates)
    {
        try
        {
            await ResearchProjectService.SaveProjectDates(_researchProject!, dates.First(), dates.Last());
            projectInfo._projectDatesMessage = "Las fechas del proyecto de investigación han sido modificadas.";
            projectInfo._projectAlertColor = Alert.AlertColor.Success;
            StateHasChanged();
            await Task.Delay(5000);
            projectInfo._projectDatesMessage = null;
            projectInfo._projectAlertColor = Alert.AlertColor.Danger;
            StateHasChanged();
        }
        catch (DomainException e)
        {
            projectInfo._projectDatesMessage = e.Message;
            StateHasChanged();
            await Task.Delay(5000);
            projectInfo._projectDatesMessage = null;
            StateHasChanged();
        }
        catch (Exception)
        {
            projectInfo._projectDatesMessage = "Ocurrió un error. Intente de nuevo.";
            StateHasChanged();
            await Task.Delay(5000);
            projectInfo._projectDatesMessage = null;
            StateHasChanged();
        }
    }

    private async void ChangeStatus(DateTime dates)
    {
        try
        {
            bool? resultMessage = await DialogService.ShowMessageBox(
                "Advertencia",
                "¿Desea hacer un cierre temprano del proyecto?",
                yesText: "Cierre temprano!", cancelText: "Cancelar");
            if (resultMessage != null)
            {
                await ResearchProjectService.SaveProjectStatus(_researchProject!, DateTime.Now);
                projectInfo._projectStatusMessage = "Se ha hecho un cierre temprano del proyecto.";
                projectInfo._projectAlertColor = Alert.AlertColor.Success;
                StateHasChanged();
                await Task.Delay(5000);
                projectInfo._projectStatusMessage = null;
                projectInfo._projectAlertColor = Alert.AlertColor.Danger;
                StateHasChanged();
            }
        }
        catch (DomainException e)
        {
            projectInfo._projectStatusMessage = e.Message;
            StateHasChanged();
            await Task.Delay(5000);
            projectInfo._projectStatusMessage = null;
            StateHasChanged();
        }
        catch (Exception)
        {
            projectInfo._projectStatusMessage = "Ocurrió un error. Intente de nuevo.";
            StateHasChanged();
            await Task.Delay(5000);
            projectInfo._projectStatusMessage = null;
            StateHasChanged();
        }
    }

    private async Task openAddThesisDialog()
    {
        var parameters = new DialogParameters { ["project"] = _researchProject };
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<AddThesisDialog>("", parameters, maxWidth); ;
        var result = await dialog.Result;
        StateHasChanged();
    }

    private async Task openDeleteThesisDialog()
    {
        var parameters = new DialogParameters { ["project"] = _researchProject };
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<DeleteThesisDialog>("", parameters, maxWidth); ;
        var result = await dialog.Result;
        StateHasChanged();
    }
}
