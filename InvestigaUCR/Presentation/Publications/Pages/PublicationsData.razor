@page "/publicaciones"
@using Application.Publications
@using Domain.Publications.Entities
@using Application.Publications.Implementations
@using Presentation.Core.Components
@using Presentation.Publications.Components
@inject IDialogService DialogService

@inject IPublications Publications
<div class="container">
    <MudItem Style="position:relative; top:4%; max-width:300px; width:auto; left:10%; margin-left:auto; display:flex">
        <MudTextField @bind-Value="_searchText" Immediate="true" Label="Buscar publicaciones" Clearable="true"
                      Variant="Variant.Outlined" Adornment="Adornment.End"
                      AdornmentIcon="@Icons.Filled.Search" AdornmentColor="Color.Secondary" />
    </MudItem>

    <MudText Align="Align.Center" Typo="Typo.h1">
        Publicaciones
        <AuthorizeView Roles="AdminRole">
            <ToolButton onClick="OpenDialog" _icon="@Icons.Filled.AddCircle" _text="Añadir un grupo nuevo" />
        </AuthorizeView>
        <MudTooltip Placement="Placement.Right" Text="Las publicaciones están ordenadas cronológicamente">
        <MudIconButton Icon="@Icons.Filled.Info" />
    </MudTooltip>
    </MudText>
    <br /><br />
    <Loading IsLoading="_isLoading">

        @if (_publications!.Any() && !_filteredPublications!.Any())
        {
            <MudText Align="Align.Center" Color=Color.Warning Typo="Typo.body2" Class="text-danger">No se encontraron publicaciones que coincidan con el texto ingresado.</MudText>
        }
        else
        {
            <PublicationsList _publications="_filteredPublications" />
        }
    </Loading>
</div>

@code {
    private bool _isLoading { get; set; }

    private IEnumerable<Publication> _publications = Enumerable.Empty<Publication>();
    private string _searchText = "";
    private IEnumerable<Publication> _filteredPublications
    {
        get
        {
            return Publications.GetFilteredPublications(_searchText, _publications);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadStocks();
    }

    private async Task LoadStocks()
    {
        _isLoading = true;
        _publications = await Publications.GetPublicationsAsync();
        _isLoading = false;
    }
    private void OpenDialog()
    {
        DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<PublicationForm>("", maxWidth);
    }

}

